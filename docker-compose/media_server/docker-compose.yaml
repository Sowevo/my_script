services:
  # 使用macvlan的网络,使得容器获得独立的ip
  # ip范围10.0.0.51~10.0.0.100
  # 方便做流量控制
#  moviepilot-v2
  moviepilot-v2:
    image: jxxghp/moviepilot-v2:latest
    container_name: moviepilot-v2
    hostname: moviepilot-v2
    restart: always
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    depends_on:
      - emby
      - plex
      - qbittorrent
    networks:
      macvlan:
        ipv4_address: 10.0.0.51
    mac_address: 10:00:00:00:00:51
    environment:
      # 时区
      - TZ=Asia/Shanghai
      # WEB服务端口，默认3000，可自行修改，不能与API服务端口冲突
      - NGINX_PORT=3000
      # API服务端口，默认3001，可自行修改，不能与WEB服务端口冲突
      - PORT=3001
      # 用户id
      - PUID=1000
      # 用户组id
      - PGID=100
      # 掩码权限，默认000，可以考虑设置为022
      - UMASK=022
      # 管理用户id
      - SUPERUSER=sowevo
    ports:
      - "3000:3000"
    volumes:
      # 配置文件夹
      - /share/Container/docker-volumes/moviepilot-v2/config:/config
      # 媒体目录
      - /share:/share
#  # MoviePilot
#  moviepilot:
#    image: jxxghp/moviepilot:latest
#    container_name: moviepilot
#    hostname: moviepilot
#    restart: always
#    labels:
#      - "com.centurylinklabs.watchtower.enable=true"
#    depends_on:
#      - emby
#      - plex
#      - qbittorrent
#    networks:
#      macvlan:
#        ipv4_address: 10.0.0.51
#    mac_address: 10:00:00:00:00:51
#    env_file:
#      # 站点认证相关的数据还是需要写到.env文件中
#      # 需要的有
#      # AUTH_SITE,AUDIENCES_UID,AUDIENCES_PASSKEY,IYUU_SIGN等
#      - .env
#
#    environment:
#      # 时区
#      - TZ=Asia/Shanghai
#      # WEB服务端口，默认3000，可自行修改，不能与API服务端口冲突
#      - NGINX_PORT=3000
#      # API服务端口，默认3001，可自行修改，不能与WEB服务端口冲突
#      - PORT=3001
#      # 用户id
#      - PUID=1000
#      # 用户组id
#      - PGID=100
#      # 掩码权限，默认000，可以考虑设置为022
#      - UMASK=022
#
#    volumes:
#      # 配置文件夹
#      - /share/Container/docker-volumes/moviepilot/config:/config
#      # 媒体目录
#      - /share:/share
#      # docker.sock
#      - /var/run/docker.sock:/var/run/docker.sock
#    ports:
#      - "3000:3000"

  plex:
    image: linuxserver/plex
    container_name: plex
    hostname: plex
    restart: always
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    networks:
      macvlan:
        ipv4_address: 10.0.0.61
    mac_address: 10:00:00:00:00:61
    environment:
      # 用户id
      - PUID=1000
      # 用户组id
      - PGID=100
      - TZ=Asia/Shanghai
      - VERSION=docker
    devices:
      - /dev/dri:/dev/dri
    volumes:
      # 配置文件夹
      - /share/Container/docker-volumes/plex/config:/config
      # 媒体目录
      - /share:/share
    ports:
      - "32400:32400"

  # emby 测试下开心不开心
  emby:
    image: amilys/embyserver
    container_name: emby
    hostname: emby
    restart: always
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    networks:
      macvlan:
        ipv4_address: 10.0.0.60
    mac_address: 10:00:00:00:00:60
    depends_on:
      - pixman
    environment:
      # 用户id
      - PUID=1000
      # 用户组id
      - PGID=100
      - TZ=Asia/Shanghai
    devices:
      - /dev/dri:/dev/dri
    volumes:
      # 配置文件夹
      - /share/Container/docker-volumes/emby/config:/config
      # 媒体目录
      - /share:/share

  # 下载器
  qbittorrent:
    image: linuxserver/qbittorrent:4.4.5
    container_name: qbittorrent
    hostname: qbittorrent
    restart: always
    networks:
      macvlan:
        ipv4_address: 10.0.0.53
    mac_address: 10:00:00:00:00:53
    environment:
      # 用户id
      - PUID=1000
      # 用户组id
      - PGID=100
      - TZ=Asia/Shanghai
      - WEBUI_PORT=8080 # QB webui的端口，你可以换成其他端口
    volumes:
      - /share/Container/docker-volumes/qbittorrent/config:/config
      - /share:/share
    ports:
      - "50126:50126"
      - "50126:50126/udp"
      - "8080:8080"

  # icloud 同步01
  icloudpd_01:
    image: boredazfcuk/icloudpd:latest
    container_name: icloudpd_01
    hostname: icloudpd_01
    restart: always
    networks:
      macvlan:
        ipv4_address: 10.0.0.54
    mac_address: 10:00:00:00:00:54
    volumes:
      # 配置文件夹
      - /share/Container/docker-volumes/icloudpd/01:/config
      # 媒体目录
      - /share/CACHEDEV2_DATA/Vol2/照片/iCloud/01:/iCloud

  # icloud 同步02
  icloudpd_02:
    image: boredazfcuk/icloudpd:latest
    container_name: icloudpd_02
    hostname: icloudpd_02
    restart: always
    networks:
      macvlan:
        ipv4_address: 10.0.0.55
    mac_address: 10:00:00:00:00:55
    volumes:
      # 配置文件夹
      - /share/Container/docker-volumes/icloudpd/02:/config
      # 媒体目录
      - /share/CACHEDEV2_DATA/Vol2/照片/iCloud/02:/iCloud

  # 在线图库
  mt-photos:
    image: mtphotos/mt-photos:latest
    container_name: mt-photos
    hostname: mt-photos
    restart: always
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    networks:
      macvlan:
        ipv4_address: 10.0.0.56
    mac_address: 10:00:00:00:00:56
    environment:
      # 用户id
      - PUID=1000
      # 用户组id
      - PGID=100
      - TZ=Asia/Shanghai
    volumes:
      # 配置文件夹
      - /share/Container/docker-volumes/mtphotos/config:/config
      - /share/Container/docker-volumes/mtphotos/upload:/upload
      # 媒体目录
      - /share:/share
    depends_on:
      - mt-photos-insightface
      - mt-photos-ai

  # 在线图库的人脸识别
  mt-photos-insightface:
    image: devfox101/mt-photos-insightface-unofficial:latest
    container_name: mt-photos-insightface
    hostname: mt-photos-insightface
    restart: always
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    networks:
      macvlan:
        ipv4_address: 10.0.0.62
    mac_address: 10:00:00:00:00:62
    environment:
      - API_AUTH_KEY=mt_photos_ai_extra
  # 在线图库的特征识别
  mt-photos-ai:
    image: mtphotos/mt-photos-ai:onnx-latest
    container_name: mt-photos-ai
    hostname: mt-photos-ai
    restart: always
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    networks:
      macvlan:
        ipv4_address: 10.0.0.63
    mac_address: 10:00:00:00:00:63
    environment:
      - API_AUTH_KEY=mt_photos_ai_extra_secret

  # 云盘
  clouddrive:
    image: cloudnas/clouddrive2
    container_name: clouddrive
    hostname: clouddrive
    restart: always
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    networks:
      macvlan:
        ipv4_address: 10.0.0.58
    mac_address: 10:00:00:00:00:58
    environment:
      - TZ=Asia/Shanghai
      - CLOUDDRIVE_HOME=/Config
    volumes:
      - /share:/share
      - /share/Container/docker-volumes/clouddrive/config:/Config
    privileged: true
    devices:
      - /dev/fuse:/dev/fuse
    ports:
      - "19798:19798"

  # IPTV相关
  pixman:
    image: pixman/pixman:latest
    container_name: pixman
    hostname: pixman
    restart: always
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    networks:
      macvlan:
        ipv4_address: 10.0.0.59
    mac_address: 10:00:00:00:00:59
    ports: # 这个端口映射
      - "5000:5000"
  # IPTV相关
  feiyang_allinone:
    image: youshandefeiyang/allinone
    container_name: feiyang_allinone
    hostname: feiyang_allinone
    restart: always
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    networks:
      macvlan:
        ipv4_address: 10.0.0.57
    mac_address: 10:00:00:00:00:57
    ports:
      - "35455:35455"


  # watchtower 自动更新
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    hostname: watchtower
    restart: always
    environment:
      - WATCHTOWER_LABEL_ENABLE=true  # 只监控带有 com.centurylinklabs.watchtower.enable=true 标签的容器
      - WATCHTOWER_POLL_INTERVAL=3600  # 检查间隔时间
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      macvlan:
        ipv4_address: 10.0.0.52
    mac_address: 10:00:00:00:00:52

#  # telegram下载器,临时用
#  telegram_media_downloader:
#    image: tangyoha/telegram_media_downloader:latest
#    container_name: telegram_media_downloader
#    hostname: telegram_media_downloader
#    restart: always
#    labels:
#      - "com.centurylinklabs.watchtower.enable=true"
#    networks:
#      macvlan:
#        ipv4_address: 10.0.0.61
#    mac_address: 10:00:00:00:00:61
#    environment:
#      # 用户id
#      - PUID=1000
#      # 用户组id
#      - PGID=100
#      - TZ=Asia/Shanghai
#    # UID:GID
#    user: "1000:100"
#    ports:
#      - "5000:5000"
#    volumes:
#      # 下载的文件
#      - /share/CACHEDEV1_DATA/Vol1/media_volume/downloads/telegram:/app/downloads
#      # Rclone
#      # - "$HOME/.config/rclone/:$HOME/.config/rclone/"
#
#      # 配置文件
#      - /share/Container/docker-volumes/telegram_media_downloader/config.yaml:/app/config.yaml
#      - /share/Container/docker-volumes/telegram_media_downloader/data.yaml:/app/data.yaml
#      # 日志
#      - /share/Container/docker-volumes/telegram_media_downloader/log:/app/log
#      # 会话
#      - /share/Container/docker-volumes/telegram_media_downloader/sessions:/app/sessions
#      # 缓存
#      - /share/Container/docker-volumes/telegram_media_downloader/temp:/app/temp
#
#  # hlink:手动批量硬链接,临时用
#  hlink:
#    image: likun7981/hlink:latest # docker镜像名称
#    container_name: hlink
#    hostname: hlink
#    restart: always
#    networks:
#      macvlan:
#        ipv4_address: 10.0.0.62
#    mac_address: 10:00:00:00:00:62
#    environment:
#      # 用户id
#      - PUID=1000
#      # 用户组id
#      - PGID=100
#      - TZ=Asia/Shanghai
#      - UMASK=022
#      - HLINK_HOME=/config
#    volumes:
#      # 配置文件夹
#      - /share/Container/docker-volumes/hlink/config:/config
#      # 媒体目录
#      - /share:/share
#    ports: # 这个端口映射
#      - "9090:9090"

networks:
  macvlan:
    driver: macvlan
    driver_opts:
      parent: eth0
      # 这是网口2的名字，可以通过ifconfig查看
      # parent: qvs0
    ipam:
      config:
        - subnet: 10.0.0.0/24
          gateway: 10.0.0.1