services:
  # 使用macvlan的网络,使得容器获得独立的ip
  # ip范围10.0.0.51~10.0.0.100
  # 方便做流量控制
#  moviepilot-v2
  moviepilot-v2:
    image: jxxghp/moviepilot-v2:latest
    container_name: moviepilot-v2
    hostname: moviepilot-v2
    restart: always
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    depends_on:
      # 依赖服务
      qbittorrent:
        condition: service_started
      plex:
        condition: service_started
      clouddrive:
        condition: service_started
      moviepilot-redis:
        condition: service_healthy
      moviepilot-postgres:
        condition: service_healthy
    networks:
      macvlan:
        ipv4_address: 10.0.0.51
    mac_address: 10:00:00:00:00:51
    environment:
      # 时区
      - TZ=Asia/Shanghai
      # WEB服务端口，默认3000，可自行修改，不能与API服务端口冲突
      - NGINX_PORT=3000
      # API服务端口，默认3001，可自行修改，不能与WEB服务端口冲突
      - PORT=3001
      # 用户id
      - PUID=1000
      # 用户组id
      - PGID=100
      # 掩码权限，默认000，可以考虑设置为022
      - UMASK=022
      # 管理用户id
      - SUPERUSER=sowevo
      # 缓存后端类型
      - CACHE_BACKEND_TYPE=redis
      # 缓存后端url
      - CACHE_BACKEND_URL=redis://:password@moviepilot-redis:6379
#      # 外置数据库配置
#      - DB_TYPE=postgresql
#      - DB_POSTGRESQL_HOST=moviepilot-postgres
#      - DB_POSTGRESQL_PORT=5432
#      - DB_POSTGRESQL_DATABASE=moviepilot
#      - DB_POSTGRESQL_USERNAME=moviepilot
#      - DB_POSTGRESQL_PASSWORD=password
    ports:
      - "3000:3000"
    volumes:
      # 配置文件夹
      - /vol3/1000/docker-volume/moviepilot/config:/config
      - /vol3/1000/docker-volume/moviepilot/core:/moviepilot/.cache/ms-playwright
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # 媒体目录
      - /vol1/1000/media_volume:/vol1/1000/media_volume

  moviepilot-redis:
    image: redis:8-alpine
    container_name: moviepilot-redis
    hostname: moviepilot-redis
    restart: always
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    networks:
      macvlan:
        ipv4_address: 10.0.0.57
    mac_address: 10:00:00:00:00:57
    environment:
      # 时区
      - TZ=Asia/Shanghai
    ports:
      - "6379:6379"
    volumes:
      - /vol3/1000/docker-volume/redis/data:/data
    command: redis-server --save 600 1 --requirepass password
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5


  moviepilot-postgres:
    image: postgres:17.6-alpine
    container_name: moviepilot-postgres
    hostname: moviepilot-postgres
    restart: always
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    networks:
      macvlan:
        ipv4_address: 10.0.0.59
    mac_address: 10:00:00:00:00:59
    environment:
      - POSTGRES_DB=moviepilot
      - POSTGRES_USER=moviepilot
      - POSTGRES_PASSWORD=password
      # 时区
      - TZ=Asia/Shanghai
    ports:
      - "5432:5432"
    volumes:
      - /vol3/1000/docker-volume/postgres:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U moviepilot -d moviepilot" ]
      interval: 10s
      timeout: 5s
      retries: 5

#  pgloader:
#    image: dimitri/pgloader:latest
#    volumes:
#      - /vol3/1000/docker-volume/moviepilot/config:/mp_config
#    networks:
#      macvlan:
#        ipv4_address: 10.0.0.156
#    command: >
#      pgloader
#      sqlite:///mp_config/user.db
#      postgresql://moviepilot:password@moviepilot-postgres:5432/moviepilot
#    depends_on:
#      moviepilot-postgres:
#        condition: service_healthy

  plex:
    image: linuxserver/plex
    container_name: plex
    hostname: plex
    restart: always
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    networks:
      macvlan:
        ipv4_address: 10.0.0.61
    mac_address: 10:00:00:00:00:61
    environment:
      # 用户id
      - PUID=1000
      # 用户组id
      - PGID=100
      - TZ=Asia/Shanghai # 时区
      - VERSION=docker
    devices:
      - /dev/dri:/dev/dri
    volumes:
      # 配置文件夹
      - /vol3/1000/docker-volume/plex/config:/config
      # 媒体目录
      - /vol1/1000/media_volume:/vol1/1000/media_volume
    ports:
      - "32400:32400"

#  # emby 测试下开心不开心
#  emby:
#    image: amilys/embyserver
#    container_name: emby
#    hostname: emby
#    restart: always
#    labels:
#      - "com.centurylinklabs.watchtower.enable=true"
#    networks:
#      macvlan:
#        ipv4_address: 10.0.0.60
#    mac_address: 10:00:00:00:00:60
#    environment:
#      # 用户id
#      - PUID=1000
#      # 用户组id
#      - PGID=100
#      - TZ=Asia/Shanghai
#    devices:
#      - /dev/dri:/dev/dri
#    volumes:
#      # 配置文件夹
#      - /vol3/1000/docker-volume/emby/config:/config
#      # 媒体目录
#      - /vol1/1000/media_volume:/vol1/1000/media_volume:ro


  jellyfin:
    image: nyanmisaka/jellyfin
    container_name: jellyfin
    hostname: jellyfin
    restart: always
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    networks:
      macvlan:
        ipv4_address: 10.0.0.64
    mac_address: 10:00:00:00:00:64
    environment:
      # 用户id
      - PUID=1000
      # 用户组id
      - PGID=100
      - TZ=Asia/Shanghai # 时区
    devices:
      - /dev/dri:/dev/dri
    volumes:
      # 配置文件夹
      - /vol3/1000/docker-volume/jellyfin/config:/config
      # 媒体目录
      - /vol1/1000/media_volume:/vol1/1000/media_volume:ro
    ports:
      - "8096:8096"

  # 下载器
  qbittorrent:
    image: linuxserver/qbittorrent:4.4.5
    container_name: qbittorrent
    hostname: qbittorrent
    restart: always
    networks:
      macvlan:
        ipv4_address: 10.0.0.53
    mac_address: 10:00:00:00:00:53
    environment:
      # 用户id
      - PUID=1000
      # 用户组id
      - PGID=100
      - TZ=Asia/Shanghai # 时区
      - WEBUI_PORT=8080 # QB webui的端口，可以换成其他端口
      # 开启 vuetorrent 插件
      - DOCKER_MODS=ghcr.io/vuetorrent/vuetorrent-lsio-mod:latest
    volumes:
      - /vol3/1000/docker-volume/qbittorrent/config:/config
      # 媒体目录
      - /vol1/1000/media_volume:/vol1/1000/media_volume
    ports:
      - "50126:50126"
      - "50126:50126/udp"
      - "8080:8080"

  # 云盘
  clouddrive:
    image: cloudnas/clouddrive2
    container_name: clouddrive
    hostname: clouddrive
    restart: always
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    networks:
      macvlan:
        ipv4_address: 10.0.0.58
    mac_address: 10:00:00:00:00:58
    environment:
      - TZ=Asia/Shanghai # 时区
      - CLOUDDRIVE_HOME=/Config
    volumes:
      # 媒体目录
      - /vol1/1000/media_volume:/vol1/1000/media_volume:shared
      - /vol3/1000/docker-volume/clouddrive/config:/Config
    privileged: true
    devices:
      - /dev/fuse:/dev/fuse
    ports:
      - "19798:19798"


  # icloud 同步01
  icloudpd_01:
    image: boredazfcuk/icloudpd:latest
    container_name: icloudpd_01
    hostname: icloudpd_01
    restart: always
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    networks:
      macvlan:
        ipv4_address: 10.0.0.54
    mac_address: 10:00:00:00:00:54
    environment:
      - TZ=Asia/Shanghai # 时区
    volumes:
      # 配置文件夹
      - /vol3/1000/docker-volume/icloudpd_01:/config
      # 媒体目录
      - /vol2/1000/photo/照片/iCloud/01:/iCloud

  # icloud 同步02
  icloudpd_02:
    image: boredazfcuk/icloudpd:latest
    container_name: icloudpd_02
    hostname: icloudpd_02
    restart: always
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    networks:
      macvlan:
        ipv4_address: 10.0.0.55
    mac_address: 10:00:00:00:00:55
    environment:
      - TZ=Asia/Shanghai # 时区
    volumes:
      # 配置文件夹
      - /vol3/1000/docker-volume/icloudpd_02:/config
      # 媒体目录
      - /vol2/1000/photo/照片/iCloud/02:/iCloud

  # watchtower 自动更新
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    hostname: watchtower
    restart: always
    environment:
      - WATCHTOWER_LABEL_ENABLE=true  # 只监控带有 com.centurylinklabs.watchtower.enable=true 标签的容器
      - WATCHTOWER_POLL_INTERVAL=3600  # 检查间隔时间
      - WATCHTOWER_CLEANUP=true # 自动清理旧镜像
      - TZ=Asia/Shanghai # 时区
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      macvlan:
        ipv4_address: 10.0.0.52
    mac_address: 10:00:00:00:00:52
  # coolercontrol 风扇控制
  coolercontrol:
    image: ghcr.io/guniv/coolercontrol-docker
    container_name: coolercontrol
    hostname: coolercontrol
    restart: always
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    privileged: true  # 开启特权模式
    volumes:
      - /sys/class/hwmon:/sys/class/hwmon
      # 配置文件夹
      - /vol3/1000/docker-volume/coolercontrol:/etc/coolercontrol
    networks:
      macvlan:
        ipv4_address: 10.0.0.56
    mac_address: 10:00:00:00:00:56
    ports:
      - "11987:11987"

## 需要提前手动创建这个网络
## docker network create --driver macvlan --subnet 10.0.0.0/24 --gateway 10.0.0.1 --opt parent=eno1 macvlan
#networks:
#  macvlan:
#    external: true
#    name: macvlan


networks:
  macvlan:
    driver: macvlan
    driver_opts:
      parent: eno1
      # 这是网口2的名字，可以通过ifconfig查看
      # parent: qvs0
    ipam:
      config:
        - subnet: 10.0.0.0/24
          gateway: 10.0.0.1