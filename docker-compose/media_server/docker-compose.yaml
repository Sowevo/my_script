version: "3"
services:
  # 使用macvlan的网络,使得容器获得独立的ip
  # ip范围10.0.0.51~10.0.0.100
  # 方便做流量控制

  # MoviePilot
  moviepilot:
    image: jxxghp/moviepilot:latest
    container_name: moviepilot
    hostname: moviepilot
    restart: always
    depends_on:
      - plex
      - qbittorrent
    networks:
      macvlan:
        ipv4_address: 10.0.0.51
    env_file:
      - .env
    environment:
      # 时区
      - TZ=Asia/Shanghai


      # WEB服务端口，默认3000，可自行修改，不能与API服务端口冲突
      - NGINX_PORT=3000
      # API服务端口，默认3001，可自行修改，不能与WEB服务端口冲突
      - PORT=3001

      # 用户id
      - PUID=1000
      # 用户组id
      - PGID=100
      # 掩码权限，默认000，可以考虑设置为022
      - UMASK=022
      # 网络代理，访问themoviedb或者重启更新需要使用代理访问，格式为http(s)://ip:port、socks5://user:pass@host:port
      - PROXY_HOST=
      # 重启更新，重启时自动更新，true/release/dev/false，默认release，需要能正常连接Github 注意：如果出现网络问题可以配置PROXY_HOST
      - MOVIEPILOT_AUTO_UPDATE=release
      # 认证站点（认证通过后才能使用站点相关功能），支持配置多个认证站点，使用,分隔，如：iyuu,hhclub，会依次执行认证操作，直到有一个站点认证成功。
      # 配置AUTH_SITE后，需要根据下表配置对应站点的认证参数。
      # 认证资源v1.1.4支持：iyuu/hhclub/audiences/hddolby/zmpt/freefarm/hdfans/wintersakura/leaves/ptba /icc2022/ptlsp/xingtan/ptvicomo/agsvpt/hdkyl
      - AUTH_SITE=audiences
      # 超级管理员用户名，默认admin，安装后使用该用户登录后台管理界面，注意：启动一次后再次修改该值不会生效，除非删除数据库文件！
      - SUPERUSER=sowevo
      # API密钥，默认moviepilot，在媒体服务器Webhook、微信回调等地址配置中需要加上?token=该值，建议修改为复杂字符串
      # API_TOKEN: 敏感参数写到.env文件里面
      # 大内存模式，默认为false，开启后会占用更多的内存，但响应速度会更快
      - BIG_MEMORY_MODE=true
      # Github token，提高自动更新、插件安装等请求Github Api的限流阈值，格式：ghp_****
      - GITHUB_TOKEN=
      # 开发者模式，true/false，默认false，开启后会暂停所有定时任务
      - DEV=false
      # 自动更新站点资源，true/false
      - AUTO_UPDATE_RESOURCE=true
      # TMDB API地址，默认api.themoviedb.org，也可配置为api.tmdb.org或其它中转代理服务地址，能连通即可
      - TMDB_API_DOMAIN=api.themoviedb.org
      # TMDB图片地址，默认image.tmdb.org，可配置为其它中转代理以加速TMDB图片显示，如：static-mdb.v.geilijiasu.com
      - TMDB_IMAGE_DOMAIN=image.tmdb.org
      # 登录首页电影海报，tmdb/bing，默认tmdb
      - WALLPAPER=tmdb
      # 媒体信息识别来源，themoviedb/douban，默认themoviedb，使用douban时不支持二级分类
      - RECOGNIZE_SOURCE=themoviedb
      # Fanart开关，true/false，默认true，关闭后刮削的图片类型会大幅减少
      - FANART_ENABLE=true
      # 刮削元数据及图片使用的数据源，themoviedb/douban，默认themoviedb
      - SCRAP_SOURCE=themoviedb
      # 新增已入库媒体是否跟随TMDB信息变化，true/false，默认true，为false时即使TMDB信息变化了也会仍然按历史记录中已入库的信息进行刮削
      - SCRAP_FOLLOW_TMDB=true
      # 交互搜索自动下载用户ID，使用,分割
      - AUTO_DOWNLOAD_USER=
      # OCR识别服务器地址，格式：http(s)://ip:port，用于识别站点验证码实现自动登录获取Cookie等，不配置默认使用内建服务器https://movie-pilot.org，可使用 这个镜像 jxxghp/moviepilot-ocr 自行搭建。
      - OCR_HOST=https://movie-pilot.org
      # 下载站点字幕，true/false，默认true 暂时开启,试试看
      - DOWNLOAD_SUBTITLE=true
      # 电影重命名格式,基于jinjia2语法
      - MOVIE_RENAME_FORMAT={{title}}{% if year %} ({{year}}){% endif %}/{{title}}{% if part %}-{{part}}{% endif %}{% if year %} ({{year}}){% endif %}{% if videoFormat %} - {{videoFormat}}{% endif %}{{fileExt}}
      # 电视剧重命名格式,基于jinjia2语法
      - TV_RENAME_FORMAT={{title}}{% if year %} ({{year}}){% endif %}/Season {{season}}/{{title}}{% if part %}-{{part}}{% endif %} - {{season_episode}}{% if episode %} - 第 {{episode}} 集{% endif %}{{fileExt}}
      # PLUGIN_MARKET： 插件市场仓库地址，仅支持Github仓库main分支，多个地址使用,分隔，默认为官方插件仓库：https://github.com/jxxghp/MoviePilot-Plugins ，通过查看MoviePilot-Plugins项目的fork，或者查看频道置顶了解更多第三方插件仓库。
      - PLUGIN_MARKET=https://github.com/jxxghp/MoviePilot-Plugins


      # 下载保存目录，注意：需要将moviepilot及下载器的映射路径保持一致，否则会导致下载文件无法转移
      - DOWNLOAD_PATH=/share/CACHEDEV1_DATA/Vol1/media_volume/downloads
      # 电影下载保存目录，必须是DOWNLOAD_PATH的下级路径，不设置则下载到DOWNLOAD_PATH
      - DOWNLOAD_MOVIE_PATH=/share/CACHEDEV1_DATA/Vol1/media_volume/downloads/movies
      # 电视剧下载保存目录，必须是DOWNLOAD_PATH的下级路径，不设置则下载到DOWNLOAD_PATH
      - DOWNLOAD_TV_PATH=/share/CACHEDEV1_DATA/Vol1/media_volume/downloads/series
      # 动漫下载保存目录，必须是DOWNLOAD_PATH的下级路径，不设置则下载到DOWNLOAD_PATH
      - DOWNLOAD_ANIME_PATH=/share/CACHEDEV1_DATA/Vol1/media_volume/downloads/bangumi
      # 媒体库目录，多个目录使用,分隔
      - LIBRARY_PATH=/share/CACHEDEV1_DATA/Vol1/media_volume
      # 电影媒体库目录名，默认电影
      - LIBRARY_MOVIE_NAME=movies
      # 电视剧媒体库目录名，默认电视剧
      - LIBRARY_TV_NAME=series
      # 动漫媒体库目录名，默认电视剧/动漫
      - LIBRARY_ANIME_NAME=bangumi
      # 媒体库二级分类开关，true/false，默认false，开启后会根据配置category.yaml自动在媒体库目录下建立二级目录分类
      - LIBRARY_CATEGORY=false
      # 下载二级分类开关，true/false，默认false，开启后会根据配置category.yaml自动在下载目录下建立二级目录分类
      - DOWNLOAD_CATEGORY=false
      # 刮削入库的媒体文件，true/false，默认true
      - SCRAP_METADATA=true
      # 种子标签，默认为MOVIEPILOT，设置后只有MoviePilot添加的下载才会处理，留空所有下载器中的任务均会处理
      - TORRENT_TAG=MP
      # 转移方式，支持link/copy/move/softlink
      - TRANSFER_TYPE=link
      # CookieCloud同步间隔（分钟）
      - COOKIECLOUD_INTERVAL=60
      # CookieCloud对应的浏览器UA，可选，设置后可增加连接站点的成功率，同步站点后可以在管理界面中修改
      - USER_AGENT=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36
      # 订阅模式，rss/spider，默认spider，rss模式通过定时刷新RSS来匹配订阅（RSS地址会自动获取，也可手动维护），对站点压力小，同时可设置订阅刷新周期，24小时运行，但订阅和下载通知不能过滤和显示免费，推荐使用rss模式。
      - SUBSCRIBE_MODE=rss
      # RSS订阅模式刷新时间间隔（分钟），默认30分钟，不能小于5分钟。
      - SUBSCRIBE_RSS_INTERVAL=30
      # 订阅搜索，true/false，默认false，开启后会每隔24小时对所有订阅进行全量搜索，以补齐缺失剧集（一般情况下正常订阅即可，订阅搜索只做为兜底，会增加站点压力，不建议开启）。
      - SUBSCRIBE_SEARCH=true
      # 消息通知渠道，支持 `telegram`/`wechat`/`slack`，开启多个渠道时使用`,`分隔。同时还需要配置对应渠道的环境变量，非对应渠道的变量可删除，推荐使用`telegram`
      - MESSAGER=telegram
      # 下载器，支持qbittorrent/transmission，QB版本号要求>= 4.3.9，TR版本号要求>= 3.0，同时还需要配置对应渠道的环境变量，非对应渠道的变量可删除，推荐使用qbittorrent
      - DOWNLOADER=qbittorrent
      # 下载器监控，true/false，默认为true，开启后下载完成时才会自动整理入库
      - DOWNLOADER_MONITOR=true
      # 媒体服务器，支持emby/jellyfin/plex，同时还需要配置对应媒体服务器的环境变量，非对应媒体服务器的变量可删除，推荐使用emby
      - MEDIASERVER=plex
      # 媒体服务器同步间隔（小时），默认6，留空则不同步
      - MEDIASERVER_SYNC_INTERVAL=3

      # CookieCloud服务器地址，格式：http://ip:port，必须配置，否则无法添加站点
      # COOKIECLOUD_HOST: 敏感参数写到.env文件里面
      # CookieCloud用户KEY
      # COOKIECLOUD_KEY: 敏感参数写到.env文件里面
      # CookieCloud端对端加密密码
      # COOKIECLOUD_PASSWORD: 敏感参数写到.env文件里面
      # Telegram Bot Token
      # TELEGRAM_TOKEN: 敏感参数写到.env文件里面
      # Telegram Chat ID
      # TELEGRAM_CHAT_ID: 敏感参数写到.env文件里面
      # Telegram 用户ID，多个使用,分隔，只有用户ID在列表中才可以使用Bot，如未设置则均可以使用Bot
      # TELEGRAM_USERS: 敏感参数写到.env文件里面
      # Telegram 管理员ID，多个使用,分隔，只有管理员才可以操作Bot菜单，如未设置则均可以操作菜单
      # TELEGRAM_ADMINS: 敏感参数写到.env文件里面
      # qbittorrent地址，格式：ip:port，https需要添加https://前缀
      # QB_HOST: 敏感参数写到.env文件里面
      # qbittorrent用户名
      # QB_USER: 敏感参数写到.env文件里面
      # qbittorrent密码
      # QB_PASSWORD: 敏感参数写到.env文件里面
      # Plex服务器地址，格式：ip:port，https需要添加https://前缀
      # PLEX_HOST: 敏感参数写到.env文件里面
      # Plex网页Url中的X-Plex-Token，通过浏览器F12->网络从请求URL中获取
      # PLEX_TOKEN: 敏感参数写到.env文件里面
      # IYUU登录令牌
      # IYUU_SIGN: 敏感参数写到.env文件里面

    volumes:
      # 配置文件夹
      - /share/Container/docker-volumes/moviepilot/config:/config
      # 媒体目录
      - /share:/share
      # docker.sock
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "3000:3000"

  plex:
    image: linuxserver/plex
    container_name: plex
    hostname: plex
    restart: always
    networks:
      macvlan:
        ipv4_address: 10.0.0.52
    environment:
      # 用户id
      - PUID=1000
      # 用户组id
      - PGID=100
      - TZ=Asia/Shanghai
      - VERSION=docker
    devices:
      - /dev/dri:/dev/dri
    volumes:
      # 配置文件夹
      - /share/Container/docker-volumes/plex/config:/config
      # 媒体目录
      - /share:/share
    ports:
      - "32400:32400"

  # 下载器
  qbittorrent:
    image: linuxserver/qbittorrent:4.4.5
    container_name: qbittorrent
    hostname: qbittorrent
    restart: always
    networks:
      macvlan:
        ipv4_address: 10.0.0.53
    environment:
      # 用户id
      - PUID=1000
      # 用户组id
      - PGID=100
      - TZ=Asia/Shanghai
      - WEBUI_PORT=8080 # QB webui的端口，你可以换成其他端口
    volumes:
      - /share/Container/docker-volumes/qbittorrent/config:/config
      - /share:/share
    ports:
      - "50126:50126"
      - "50126:50126/udp"
      - "8080:8080"

  # icloud 同步01
  icloudpd_01:
    image: boredazfcuk/icloudpd:latest
    # image: sowevo/icloudpd:latest
    container_name: icloudpd_01
    hostname: icloudpd_01
    restart: always
    networks:
      macvlan:
        ipv4_address: 10.0.0.54
    volumes:
      # 配置文件夹
      - /share/Container/docker-volumes/icloudpd/01:/config
      # 媒体目录
      - /share/CACHEDEV2_DATA/Vol2/照片/iCloud/01:/iCloud

  # icloud 同步02
  icloudpd_02:
    image: boredazfcuk/icloudpd:latest
    # image: sowevo/icloudpd:latest
    container_name: icloudpd_02
    hostname: icloudpd_02
    restart: always
    networks:
      macvlan:
        ipv4_address: 10.0.0.55
    volumes:
      # 配置文件夹
      - /share/Container/docker-volumes/icloudpd/02:/config
      # 媒体目录
      - /share/CACHEDEV2_DATA/Vol2/照片/iCloud/02:/iCloud

  # 在线图库
  mtphotos:
    image: mtphotos/mt-photos:latest
    container_name: mtphotos
    hostname: mtphotos
    restart: always
    networks:
      macvlan:
        ipv4_address: 10.0.0.56
    environment:
      # 用户id
      - PUID=1000
      # 用户组id
      - PGID=100
      - TZ=Asia/Shanghai
    volumes:
      # 配置文件夹
      - /share/Container/docker-volumes/mtphotos/config:/config
      - /share/Container/docker-volumes/mtphotos/upload:/upload
      # 媒体目录
      - /share:/share
    ports: # 这个端口映射
      - "8063:8063"
  alist:
    image: xhofe/alist:latest
    container_name: alist
    hostname: alist
    restart: always
    networks:
      macvlan:
        ipv4_address: 10.0.0.57
    environment:
      # 用户id
      - PUID=1000
      # 用户组id
      - PGID=100
      - UMASK=022
    volumes:
      - /share/Container/docker-volumes/alist:/opt/alist/data
      # 媒体目录
      - /share:/share
    ports:
      - "5244:5244"




networks:
  macvlan:
    driver: macvlan
    driver_opts:
      parent: eth0
      # 这是网口2的名字，可以通过ifconfig查看
      # parent: qvs0
    ipam:
      config:
        - subnet: 10.0.0.0/24
          gateway: 10.0.0.1